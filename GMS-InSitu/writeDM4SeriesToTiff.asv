%Noah Schnitzer 
%20180514 Initial script based on dm4movie2stack by SSH
%Modified to write single precision tiffstack directly by SSH
%Modified to more precisely navigate through directories

%source_directory: path to dm4 directory which contains Hour_00 (and all
%subfolders

%prefactor:begining of file name. e.g. primatic

%bit_depth: desired bit depth of final tiff.

%max_percentile: For outlier removal, top x percentile are chopped off. Set
%to 100 for no removal

%tiff_path: path to output tiff file

%frame_averaging: number of frames (>=1) to average over-- 1 keeps all
%information

%image_scale: scale for imresize-- 1 keeps dims, >1 -> larger, <1 ->
%smaller


source_dir = '/Volumes/SSH-BLUE/Data/20210930_TaS2_Heating/videos';
dataname = '1830_200keV_SA_10_Spot_5_CL_840mm_alpha_n20p20_speed_1.5p_exp_0p2s';
save_dir = '/Volumes/SSH-BLUE/Data/20210930_TaS2_Heating/videos';

%function writeDM4SeriesToTiff(source_dir, save_dir, dataname, binXY, binFrame )
    if ~isfolder( fullfile(source_dir,dataname) )
        error( 'No specified dataset in specified source path')
    end
    
    if ~isfolder(save_dir)
        mkdir(save_dir)
    end
    
    hrs = dir(fullfile(source_dir,dataname,'Hour_*'));
    num_hrs = length(hrs);
    for ind_hr = 1:num_hrs
        % Check if hour folder is actually folder and proceed
        if hrs(ind_hr).isdir
            hour_dir = fullfile(source_dir,dataname,hrs(ind_hr).name);
            mins = dir(fullfile(hour_dir,'Minute_*'));
            num_mins = length(mins);            
            
            for ind_min = 1:num_mins
                if mins(ind_min).isdir
                    min_dir = fullfile(hour_dir,mins(ind_min).name);
                    secs = dir(fullfile(min_dir,'Second_*'));
                    num_secs = length(secs);
                    
                    for ind_sec = 1:num_secs
                        if secs(ind_sec).isdir
                            sec_dir = fullfile(min_dir,secs(ind_sec).name);
                            dms = dir(fullfile(sec_dir,'*.dm*'));
                            num_dms = length(dms);
                            
                            for ind_dm = 1:num_dms
                                if dms(ind_dm).name(1) ~='.'
                                    disp(dms(ind_dm).name)
                                    
                                    
                                    
                                    
                                end
                            end
                        end
                    end                            
                end
            end
        end
    end
    
    files = dir(fullfile(source_dir,'/*/*/*/*.dm4'));
    numFiles = length(files);
    disp_counter = 10;
    finished = false;
    ind = 1;
    
    return
    
    binScale = 1/binXY;
    delInd = [];
    % Read First Image to determine metadata
    while ind <= numFiles && ~finished
        if contains(files(ind).name, dataname) && files(ind).name(1) ~= '.'  % Checking for a proper file
            img = bfopen_im( fullfile(files(ind).folder,'/',files(ind).name) );
            [nr,nc] = size(imresize(img, binScale,'nearest'));            
            finished = true;
        else
            delInd = [delInd, ind];
        end
        ind = ind+1;
    end 
    files(delInd) = [];
    numFiles = length(files);
    
    fname = sprintf('%s_binXY%d_binFrame%d.tif',dataname, binXY,binFrame);
    
    tiffObj = Tiff( fullfile(save_dir, fname), 'w8'); %w8: tag for writing BigTIFF
    % Tiff Tags
    tagstruct.Photometric = Tiff.Photometric.MinIsBlack;    %0 is black
    tagstruct.Compression = Tiff.Compression.None;           %Lossless LZW Compression
    tagstruct.BitsPerSample = 32;                            %32bit
    tagstruct.SamplesPerPixel = 1;                          %BW image
    tagstruct.ImageWidth = nc;                              %Image size
    tagstruct.ImageLength = nr;                             %Image size
    tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
    tagstruct.SampleFormat = Tiff.SampleFormat.IEEEFP;        %FLoating point
    
    numImage = floor(numFiles/binFrame);
    for indIm = 0:(numImage-1)% First pass to find global min max
        img_binFrame = zeros( nr,nc );
        for indFrame = 1:binFrame
            
            ind = indIm*binFrame +indFrame;
            
            if rem(ind,disp_counter) == 0
                fprintf('%d out of %d done\n',ind,numFiles)
            end
            img = bfopen_im( fullfile(files(ind).folder,'/',files(ind).name) );
            img_binXY = (imresize(img, binScale,'nearest'));     
            
            img_binFrame = img_binFrame + img_binXY;
            
        end
        setTag(tiffObj,tagstruct)       %Set tag for each image
        write(tiffObj,img_binFrame); %Write image
        tiffObj.writeDirectory          %Move to next slice
    end 
    
    
   
    close(tiffObj);
%end



